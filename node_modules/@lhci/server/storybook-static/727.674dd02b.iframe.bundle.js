/*! For license information please see 727.674dd02b.iframe.bundle.js.LICENSE.txt */
"use strict";(globalThis.webpackChunk_lhci_server=globalThis.webpackChunk_lhci_server||[]).push([[727],{"./src/ui/hooks/use-api-data.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{hi:()=>api});__webpack_require__("../../node_modules/preact/hooks/dist/hooks.module.js");var _lhci_utils_src_api_client_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../utils/src/api-client.js"),_lhci_utils_src_api_client_js__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_lhci_utils_src_api_client_js__WEBPACK_IMPORTED_MODULE_1__);__webpack_require__("../utils/src/lodash.js");const api=new(_lhci_utils_src_api_client_js__WEBPACK_IMPORTED_MODULE_1___default())({rootURL:window.location.origin,URL:window.URL,fetch:window.fetch.bind(window)})},"../utils/src/api-client.js":(module,__unused_webpack_exports,__webpack_require__)=>{const log=__webpack_require__("../utils/node_modules/debug/src/browser.js")("lhci:utils:api-client"),fetch=__webpack_require__("../../node_modules/isomorphic-fetch/fetch-npm-browserify.js"),btoa="undefined"==typeof window?s=>Buffer.from(s).toString("base64"):window.btoa;class ApiClient{constructor(options){if(this._rootURL=options.rootURL,this._extraHeaders=options.extraHeaders||{},this._fetch=options.fetch||fetch,this._URL=options.URL||URL,options.basicAuth&&options.basicAuth.password){const{username=ApiClient.DEFAULT_BASIC_AUTH_USERNAME,password}=options.basicAuth;this._extraHeaders.Authorization=`Basic ${btoa(`${username}:${password}`)}`}}setBuildToken(token){this._extraHeaders={...this._extraHeaders,"x-lhci-build-token":token||""}}setAdminToken(token){this._extraHeaders={...this._extraHeaders,"x-lhci-admin-token":token||""}}_normalizeURL(url){if(!url.startsWith("/"))throw new Error(`Cannot normalize "${url}" without leading /`);const rootWithoutSlash=this._rootURL.endsWith("/")?this._rootURL.slice(0,this._rootURL.length-1):this._rootURL;return new this._URL(`${rootWithoutSlash}${url}`)}_convert404ToUndefined(returnValuePromise){return returnValuePromise.catch((err=>{if(!("status"in err)||404!==err.status)throw err}))}async _convertFetchResponseToReturnValue(response){if(204===response.status)return;if(response.status>=400){const body=await response.text(),error=new Error(`Unexpected status code ${response.status}\n  ${body}`);throw error.status=response.status,error.body=body,error}return await response.json()}async _fetchWithRequestBody(method,url,body){const response=await this._fetch(this._normalizeURL(url).href,{method,body:JSON.stringify(body),headers:{...this._extraHeaders,"content-type":"application/json"}});return this._convertFetchResponseToReturnValue(response)}async _get(rawUrl,query){const url=this._normalizeURL(rawUrl);if(query)for(const[key,value]of Object.entries(query))void 0!==value&&url.searchParams.append(key,value.toString());const response=await this._fetch(url.href,{headers:{...this._extraHeaders}});return this._convertFetchResponseToReturnValue(response)}async _post(url,body){return this._fetchWithRequestBody("POST",url,body)}async _put(url,body){return this._fetchWithRequestBody("PUT",url,body)}async _delete(rawUrl){const headers={...this._extraHeaders},response=await this._fetch(this._normalizeURL(rawUrl).href,{method:"DELETE",headers});return this._convertFetchResponseToReturnValue(response)}async initialize(){throw new Error("Unimplemented")}async getVersion(){const response=await this._fetch(this._normalizeURL("/version").href,{headers:{...this._extraHeaders}}),body=response.text();if(!response.ok){const error=new Error(`Unexpected status code ${response.status}\n  ${body}`);throw error.status=response.status,error.body=body,error}return body}async getProjects(){return this._get("/v1/projects")}async getProjectToken(project){return(await this._get(`/v1/projects/${project.id}/token`)).token}async findProjectByToken(token){return this._convert404ToUndefined(this._post("/v1/projects/lookup",{token}))}async findProjectById(projectId){return this._convert404ToUndefined(this._get(`/v1/projects/${projectId}`))}async findProjectBySlug(slug){return this._convert404ToUndefined(this._get(`/v1/projects/slug:${slug}`))}async createProject(unsavedProject){return this._post("/v1/projects",unsavedProject)}async updateProject(projectUpdates){return this._put(`/v1/projects/${projectUpdates.id}`,projectUpdates)}async deleteProject(projectId){return this._delete(`/v1/projects/${projectId}`)}async getBuilds(projectId,options={}){return this._get(`/v1/projects/${projectId}/builds`,options)}async getBranches(projectId){return this._get(`/v1/projects/${projectId}/branches`)}async createBuild(unsavedBuild){return this._post(`/v1/projects/${unsavedBuild.projectId}/builds`,unsavedBuild)}async sealBuild(projectId,buildId){return this._put(`/v1/projects/${projectId}/builds/${buildId}/lifecycle`,"sealed")}async deleteBuild(projectId,buildId){return this._delete(`/v1/projects/${projectId}/builds/${buildId}`)}async findBuildById(projectId,buildId){return this._convert404ToUndefined(this._get(`/v1/projects/${projectId}/builds/${buildId}`))}async findAncestorBuildById(projectId,buildId){return this._convert404ToUndefined(this._get(`/v1/projects/${projectId}/builds/${buildId}/ancestor`))}async getRuns(projectId,buildId,options={}){return this._get(`/v1/projects/${projectId}/builds/${buildId}/runs`,options)}async getUrls(projectId,buildId){return buildId?this._get(`/v1/projects/${projectId}/builds/${buildId}/urls`):this._get(`/v1/projects/${projectId}/urls`)}async createRun(run){return this._post(`/v1/projects/${run.projectId}/builds/${run.buildId}/runs`,run)}async getStatistics(projectId,buildId){return this._get(`/v1/projects/${projectId}/builds/${buildId}/statistics`)}async _createProject(unsavedProject){throw new Error("Unimplemented")}async _createOrUpdateStatistic(unsavedStatistic){throw new Error("Unimplemented")}async _getStatistics(projectId,buildId){throw new Error("Unimplemented")}async _invalidateStatistics(projectId,buildId){throw new Error("Unimplemented")}async findBuildsBeforeTimestamp(runAt){throw new Error("Unimplemented")}async _resetAdminToken(projectId){throw new Error("Unimplemented")}async _resetProjectToken(projectId){throw new Error("Unimplemented")}async close(){}static get DEFAULT_BASIC_AUTH_USERNAME(){return"lhci"}static isApiVersionCompatible(clientVersion,serverVersion){log(`checking for client (${clientVersion}) server (${serverVersion}) compatibility`);const partsClient=clientVersion.match(/(\d+)\.(\d+)\.\d+/),partsServer=serverVersion.match(/(\d+)\.(\d+)\.\d+/);if(!partsClient||!partsServer)return!1;let majorVersionClient=Number(partsClient[1]),majorVersionServer=Number(partsServer[1]);return majorVersionClient===majorVersionServer&&(0===majorVersionClient&&(majorVersionClient=Number(partsClient[2])),0===majorVersionServer&&(majorVersionServer=Number(partsServer[2])),majorVersionClient===majorVersionServer||majorVersionClient===majorVersionServer+1)}}module.exports=ApiClient}}]);